import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN
from . import db
from . import storage
from .states import CreateCategory, AddContact

router = Router()

# ======================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ======================

def main_menu_kb() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(
                text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                callback_data="menu:cats"
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def categories_kb(categories: list[tuple[int, str]]) -> InlineKeyboardMarkup:
    rows = []
    for cat_id, name in categories:
        rows.append([
            InlineKeyboardButton(
                text=f"üìÅ {name}",
                callback_data=f"cat:{cat_id}"
            )
        ])
    rows.append([
        InlineKeyboardButton(
            text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            callback_data="catnew"
        )
    ])
    rows.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            callback_data="menu:root"
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def category_menu_kb(cat_id: int, cat_name: str) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(
                text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                callback_data=f"cat:{cat_id}:contacts"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
                callback_data=f"cat:{cat_id}:addcontact"
            )
        ],
        [
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
                callback_data=f"cat:{cat_id}:delcontact"
            )
        ],
        [
            InlineKeyboardButton(
                text="üî• –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                callback_data=f"cat:{cat_id}:rmcat"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="menu:cats"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def delete_contact_kb(cat_id: int, contacts: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    rows = []
    for display_name, contact_value in contacts:
        rows.append([
            InlineKeyboardButton(
                text=f"‚ùå {display_name}",
                callback_data=f"delc:{cat_id}:{display_name}"
            )
        ])
    rows.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            callback_data=f"cat:{cat_id}"
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_delete_category_kb(cat_id: int, cat_name: str) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(
                text=f"‚ùó –£–¥–∞–ª–∏—Ç—å '{cat_name}'",
                callback_data=f"delcat:{cat_id}:confirm"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥",
                callback_data=f"cat:{cat_id}"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ======================
# –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (/start, /menu, /cancel)
# ======================

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await storage.setup_user(user_id)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞ üëã\n\n"
        "–Ø —Ö—Ä–∞–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–î–∏–∑–∞–π–Ω–µ—Ä—ã¬ª, ¬´–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã¬ª) "
        "–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."
    )
    await message.answer(text, reply_markup=main_menu_kb())

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    user_id = message.from_user.id
    await storage.setup_user(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_menu_kb())

# ======================
# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback_data
# ======================

@router.callback_query(F.data == "menu:root")
async def cb_menu_root(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "menu:cats")
async def cb_menu_cats(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    await storage.setup_user(user_id)

    cats = await storage.get_categories_full(user_id)
    if not cats:
        text = (
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
            "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é üëá"
        )
    else:
        text = "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"

    await callback.message.edit_text(
        text,
        reply_markup=categories_kb(cats)
    )
    await callback.answer()

# ======================
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# ======================

@router.callback_query(F.data == "catnew")
async def cb_catnew(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await storage.setup_user(user_id)

    await state.set_state(CreateCategory.waiting_name)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∏–∑–∞–π–Ω–µ—Ä—ã):\n\n"
        "–ò–ª–∏ /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
    )
    await callback.answer()

@router.message(CreateCategory.waiting_name)
async def fsm_create_category_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await storage.setup_user(user_id)

    new_cat_name = message.text.strip()
    if not new_cat_name:
        await message.answer("–ü—É—Å—Ç–æ–µ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–ª–∏ /cancel.")
        return

    created = await storage.create_category(user_id, new_cat_name)

    if created:
        await message.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_cat_name}' —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ",
            reply_markup=main_menu_kb()
        )
    else:
        await message.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_cat_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ö†Ô∏è",
            reply_markup=main_menu_kb()
        )

    await state.clear()

# ======================
# –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
# callback_data —Ñ–æ—Ä–º–∞—Ç–∞:
#   cat:<id>
#   cat:<id>:contacts
#   cat:<id>:addcontact
#   cat:<id>:delcontact
#   cat:<id>:rmcat
# ======================

@router.callback_query(F.data.startswith("cat:"))
async def cb_category_any(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await storage.setup_user(user_id)

    parts = callback.data.split(":")
    # ["cat", "<id>"] –∏–ª–∏ ["cat", "<id>", "<action>"]
    if len(parts) < 2:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
        return

    try:
        cat_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
        return

    cat_name = await storage.resolve_category_name(user_id, cat_id)
    if cat_name is None:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –±–µ–∑ action -> –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if len(parts) == 2:
        text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}"
        await state.clear()
        await callback.message.edit_text(
            text,
            reply_markup=category_menu_kb(cat_id, cat_name)
        )
        await callback.answer()
        return

    action = parts[2]

    # –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
    if action == "contacts":
        contacts_text = await storage.list_contacts_text(user_id, cat_id)
        await callback.message.edit_text(
            contacts_text,
            reply_markup=category_menu_kb(cat_id, cat_name)
        )
        await state.clear()
        await callback.answer()
        return

    # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç -> FSM
    if action == "addcontact":
        await state.set_state(AddContact.waiting_display_name)
        await state.update_data(category_id=cat_id)

        await callback.message.edit_text(
            f"–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ '{cat_name}' üëá\n"
            "–í–≤–µ–¥–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –ë–µ—Ö):\n\n"
            "–ò–ª–∏ /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
        )
        await callback.answer()
        return

    # —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç -> —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ ‚ùå
    if action == "delcontact":
        contacts = await storage.list_contacts_full(cat_id)
        if not contacts:
            await callback.message.edit_text(
                f"–í '{cat_name}' –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=category_menu_kb(cat_id, cat_name)
            )
            await state.clear()
            await callback.answer()
            return

        await callback.message.edit_text(
            f"–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ '{cat_name}'?",
            reply_markup=delete_contact_kb(cat_id, contacts)
        )
        await state.clear()
        await callback.answer()
        return

    # rmcat -> –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if action == "rmcat":
        await state.clear()
        await callback.message.edit_text(
            f"–£–¥–∞–ª–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{cat_name}' —Å–æ –í–°–ï–ú–ò –µ—ë –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=confirm_delete_category_kb(cat_id, cat_name)
        )
        await callback.answer()
        return

    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

# ======================
# FSM: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (2 —à–∞–≥–∞)
# ======================

@router.message(AddContact.waiting_display_name)
async def fsm_addcontact_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await storage.setup_user(user_id)

    display_name = message.text.strip()
    if not display_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return

    data = await state.get_data()
    data["display_name"] = display_name
    await state.update_data(**data)

    await state.set_state(AddContact.waiting_contact_value)
    await message.answer(
        "–û–∫. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å @–Ω–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "–ò–ª–∏ /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
    )

@router.message(AddContact.waiting_contact_value)
async def fsm_addcontact_value(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await storage.setup_user(user_id)

    contact_value = message.text.strip()
    if not contact_value:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –∏–ª–∏ /cancel.")
        return

    data = await state.get_data()
    cat_id = data.get("category_id")
    display_name = data.get("display_name")

    if cat_id is None or display_name is None:
        await state.clear()
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é üò¢",
            reply_markup=main_menu_kb()
        )
        return

    resp_text = await storage.add_contact(
        user_id=user_id,
        category_id=cat_id,
        display_name=display_name,
        contact_value=contact_value
    )

    await state.clear()
    await message.answer(resp_text, reply_markup=main_menu_kb())

# ======================
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ‚ùå
# callback_data:
#   delc:<cat_id>:<display_name>
# ======================

@router.callback_query(F.data.startswith("delc:"))
async def cb_delete_contact(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await storage.setup_user(user_id)

    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    try:
        cat_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    display_name = ":".join(parts[2:])  # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ

    resp = await storage.remove_contact(user_id, cat_id, display_name)
    cat_name = await storage.resolve_category_name(user_id, cat_id)

    await callback.message.edit_text(
        f"{resp}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}",
        reply_markup=category_menu_kb(cat_id, cat_name or "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    )

    await state.clear()
    await callback.answer()

# ======================
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–ª–∏–∫–æ–º
# callback_data:
#   delcat:<cat_id>:confirm
# ======================

@router.callback_query(F.data.startswith("delcat:"))
async def cb_delete_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await storage.setup_user(user_id)

    parts = callback.data.split(":")
    # –æ–∂–∏–¥–∞–µ–º ["delcat", "<cat_id>", "confirm"]
    if len(parts) < 3 or parts[2] != "confirm":
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    try:
        cat_id = int(parts[1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    resp = await storage.remove_category(user_id, cat_id)

    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cats = await storage.get_categories_full(user_id)
    if not cats:
        text = (
            f"{resp}\n\n"
            "–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
            "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é üëá"
        )
    else:
        text = f"{resp}\n\n–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"

    await state.clear()
    await callback.message.edit_text(
        text,
        reply_markup=categories_kb(cats)
    )
    await callback.answer()

# ======================
# RUN
# ======================

async def main():
    await db.init_db()

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
